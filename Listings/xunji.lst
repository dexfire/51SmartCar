C51 COMPILER V9.57.0.0   XUNJI                                                             07/01/2018 12:00:34 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE XUNJI
OBJECT MODULE PLACED IN .\Objects\xunji.obj
COMPILER INVOKED BY: D:\Software\Keil_v5\C51\BIN\C51.EXE xunji.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Lis
                    -tings\xunji.lst) TABS(2) OBJECT(.\Objects\xunji.obj)

line level    source

   1          #include <REG52.h>
   2          //#include "oled.h"
   3          //#include "bmp.h"
   4          #include "xunji.h"
   5          #include <stdio.h>
   6          //#include "eeprom.h"
   7          
   8          unsigned char time = 0;
   9          unsigned char pro_left=0,pro_right=0;
  10          struct time_config *current_time_config;
  11          unsigned char code segdata[]= {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f/*,0x77,0x7c,0x39,0x5e,0x7
             -9,0x71*/};
  12          unsigned char display;
  13          code struct time_config speed_level_configs[] = {
  14            
  15            // /* 单独一个轮子拐弯可能拖不动 */
  16          
  17            // // Mode 1
  18            // // 完全跟线走，稍慢, 表现良好
  19            // // 6T 模式下动不了 
  20            // { 65536 - 200, 5,5,  3,5,2,5,  5,3,5,2,  12500,12000 },
  21          
  22            // // Mode 2
  23            // // 完全根线，小弯大弯表现良好，修复能力强，表现优秀
  24            // { 65536 - 200, 6,6,  3,6,2,6, 6,3,6,2,12500,12000 },
  25          
  26            // // Mode 3
  27            // // 大弯修复能力弱，走着走着就偏了
  28            // //{6,6,  1,5,0,5, 5,1,5,0,12000,12000 },
  29            // // 尝试减小偏转力度
  30            // { 65536 - 200,6,6,  1,4,0,4, 4,1,4,0,12000,12000 },
  31          
  32            // // Mode 4
  33            // // 6T 模式下工作良好，表现很好   12T 也还可以
  34            // { 65536 - 200,9,9,  3,5,0,5, 5,3,5,0,12000,12000 },
  35          
  36            // // Mode 5
  37            // // 高速，拐弯溢出边界
  38            // //{15,15,  2,7,1,7, 7,2,7,1,12000,12000 },
  39            // // 尝试再次降低修正幅度   效果还可以   稳定性差
  40            // { 65536 - 200,13,13,  5,7,3,7, 7,5,7,3,12000,12000 },
  41          
  42              /* 单独一个轮子拐弯可能拖不动 */
  43          
  44            // Mode 1
  45            // 完全跟线走，稍慢, 表现良好
  46            // 6T 模式下动不了 
  47            {4,4,  2,4,1,4, 4,2,4,1,  12000,12000 },
  48          
  49            // Mode 2
  50            // 完全根线，小弯大弯表现良好，修复能力强，表现优秀
  51            {5,5,  1,5,0,5, 5,1,5,0  ,12000,12000 },
  52          
  53            // Mode 3
C51 COMPILER V9.57.0.0   XUNJI                                                             07/01/2018 12:00:34 PAGE 2   

  54            // 大弯修复能力弱，走着走着就偏了
  55            //{6,6,  1,5,0,5, 5,1,5,0,12000,12000 },
  56            // 尝试减小偏转力度
  57            {6,6,  1,5,0,5, 5,1,5,0,12000,12000 },
  58          
  59            // Mode 4
  60            // 6T 模式下工作良好，表现很好   12T 也还可以
  61            {9,9,  0,4,0,5, 4,0,5,0, 12000,12000 },
  62          
  63            // Mode 5
  64            // 高速，拐弯溢出边界
  65            //{15,15,  2,7,1,7, 7,2,7,1,12000,12000 },
  66            // 尝试再次降低修正幅度   效果还可以   稳定性差
  67            {13,13,  4,7,2,7, 7,4,7,2,12000,12000 },
  68          
  69            {6,6,  1,4,0,4, 4,1,4,0,12000,12000 },
  70          };
  71          
  72          code struct schdule_config schdule_configs[] = {
  73            {1,1},
  74            {0,0},
  75            {0,1},
  76            {2,0},  // 很好
  77            {2,1},
  78            {5,0},
  79            {5,1},
  80          
  81            // 不稳定配置
  82            {2,1},
  83            {3,1},
  84          };
  85          
  86          unsigned char turn_configs[] = {
  87            // 比赛顺序
  88            //LEFT,RIGHT,STRAIGHT,RIGHT,LEFT
  89            RIGHT,
  90            LEFT,
  91            LEFT,
  92            RIGHT
  93          };
  94          
  95          unsigned char current_time_config_index = 0;
  96          unsigned char current_schdule_config = 0;
  97          unsigned char current_turn_config = 0;
  98          unsigned char mode_low = 1;
  99          unsigned char mode_high = 2;
 100          unsigned int tune_time = 0;
 101          unsigned int runtime = 0;
 102          unsigned int left_steps=0,right_steps=0;
 103          
 104          void delay(int i)      //12M   i=500,t=500ms
 105          {
 106   1        unsigned char j;
 107   1        for( ;i>0;i--)
 108   1          for(j=220;j>0;j--);
 109   1      }
 110          
 111          char key_scan(void)    //按键扫描
 112          {
 113   1        C0=0;
 114   1        delay(1);
 115   1        if(!(R0&&R1&&R2)){BUZZER=0;delay(10);} 
C51 COMPILER V9.57.0.0   XUNJI                                                             07/01/2018 12:00:34 PAGE 3   

 116   1        if(!(R0&&R1&&R2))
 117   1        {
 118   2          if(!R0) {while(!R0);BUZZER=1;return 1;}
 119   2          if(!R1) {while(!R1);BUZZER=1;return 2;}
 120   2          if(!R2) {while(!R2);BUZZER=1;return 3;}
 121   2        }
 122   1        C0=1;
 123   1        
 124   1        C1=0;
 125   1        delay(1);
 126   1        if(!(R0&&R1&&R2)) delay(10);
 127   1        if(!(R0&&R1&&R2))
 128   1        {
 129   2          if(!R0) {while(!R0);BUZZER=1;return 4;}
 130   2          if(!R1) {while(!R1);BUZZER=1;return 5;}
 131   2          if(!R2) {while(!R2);BUZZER=1;return 6;}
 132   2        }
 133   1        C1=1;
 134   1        
 135   1        C2=0;
 136   1        delay(1);
 137   1        if(!(R0&&R1&&R2)) delay(10);
 138   1        if(!(R0&&R1&&R2))
 139   1        {
 140   2          if(!R0) {while(!R0);BUZZER=1;return 7;}
 141   2          if(!R1) {while(!R1);BUZZER=1;return 8;}
 142   2          if(!R2) {while(!R2);BUZZER=1;return 9;}
 143   2        }
 144   1        C2=1;
 145   1        
 146   1        return 0;
 147   1      }
 148          
 149          void key_control()
 150          {
 151   1        switch(key_scan()) 
 152   1          {
 153   2            case 1:
 154   2              set_display(current_time_config_index);
 155   2              break;
 156   2      
 157   2            case 2:
 158   2              set_display(current_turn_config);
 159   2              break;
 160   2            
 161   2            case 3:
 162   2              set_display(tune_time);
 163   2              break;
 164   2      
 165   2            case 8:        //换模式
 166   2            {
 167   3              // // 循环切换速度
 168   3              // current_time_config_index++;
 169   3              // if(current_time_config_index>=sizeof(speed_level_configs)/sizeof(struct time_config))
 170   3              //  current_time_config_index = 0;
 171   3              // load_time_config(current_time_config_index);
 172   3              current_schdule_config++;
 173   3              if(current_schdule_config>=sizeof(schdule_configs)/sizeof(struct schdule_config)){
 174   4                current_schdule_config = 0;
 175   4              }
 176   3              set_display(current_schdule_config);
 177   3              mode_low = schdule_configs[current_schdule_config].adjust_time_config;
C51 COMPILER V9.57.0.0   XUNJI                                                             07/01/2018 12:00:34 PAGE 4   

 178   3              mode_high = schdule_configs[current_schdule_config].straight_time_config;
 179   3              break;
 180   3              // page--;
 181   3              // if(page<1) page=1;
 182   3              // set_display(page);
 183   3              // break;
 184   3            }
 185   2            // 开始、暂停、继续
 186   2            case 9:
 187   2            {
 188   3              TR0 = !TR0; 
 189   3              TR1 = TR0; 
 190   3              set_display(TR0*(current_time_config_index));
 191   3              IN1_1 = 0;
 192   3              IN1_2 = 0;
 193   3              IN2_1 = 0;
 194   3              IN2_2 = 0;
 195   3              tune_time = 0;
 196   3              runtime = 0;
 197   3              break;
 198   3            }
 199   2          }
 200   1      }
 201          
 202          
 203          void init()
 204          {
 205   1        EA=1;
 206   1        TMOD=0x11;      //配置为定时器0 8位重装模式，定时器1为16位定时器
 207   1        
 208   1        TH0=(65536-TIMER0)/256;                 //12M，定时50us
 209   1        TL0=(65536-TIMER0)%256;
 210   1        ET0=1;
 211   1        TR0=0;
 212   1      
 213   1        TH1=(65536-2000)/256;                 //12M，定时2ms
 214   1        TL1=(65536-2000)%256;
 215   1        ET1=1;
 216   1        TR1=0;
 217   1        
 218   1        // T2CON = 0;  //0000 0000   ;定时器2配置为16位自动重装定时器
 219   1        // RCAP2H = _iror_(65536-250,8);
 220   1        // RCAP2L = 65536-250;
 221   1        // TH2 = _iror_(65536-250,8);
 222   1        // TL2 = 65536-250;
 223   1        // ET2 = 1;
 224   1        // TR2 = 0;
 225   1        
 226   1        TRIG = 0;
 227   1        ECHO = 1;
 228   1        SIG1 = 0;
 229   1        BUZZER = 1;
 230   1        IN1_1 = 0;
 231   1        IN1_2 = 0;
 232   1        IN2_1 = 0;
 233   1        IN2_2 = 0;
 234   1        current_time_config = &speed_level_configs[0];
 235   1        //eeprom_init();
 236   1        set_display(0);
 237   1      }
 238          
 239          void straight() //走直线
C51 COMPILER V9.57.0.0   XUNJI                                                             07/01/2018 12:00:34 PAGE 5   

 240          {
 241   1        // 切换配置
 242   1        // 由于比较耗时，所以判断一下当前模式是值得的
 243   1        if(runtime > tune_time){
 244   2          if(current_time_config_index!=mode_high){
 245   3      
 246   3          }
 247   2            load_time_config(mode_high);
 248   2        }
 249   1        pro_left  = (*current_time_config).lstraight;
 250   1        pro_right = (*current_time_config).rstraight;
 251   1      }
 252          
 253          void turn_left() //左修正
 254          {
 255   1      
 256   1        pro_left  = (*current_time_config).lturn_left;
 257   1        pro_right = (*current_time_config).rturn_left;
 258   1        
 259   1      //  if((runtime>tune_time)&&(current_time_config_index!=mode_low)){
 260   1      //    load_time_config(mode_low);
 261   1      //    
 262   1      //    tune_time = runtime + ADJUST_TIME_SHORT;
 263   1      //  }else{
 264   1      //    pro_left  = (*current_time_config).lturn_left;
 265   1      //    pro_right = (*current_time_config).rturn_left;
 266   1      //  }
 267   1      }
 268          
 269          void turn_right() //右修正
 270          {
 271   1        pro_left  = (*current_time_config).lturn_right;
 272   1        pro_right = (*current_time_config).rturn_right;
 273   1        
 274   1      //  if((runtime>tune_time)&&(current_time_config_index!=mode_low)){
 275   1      //    load_time_config(mode_low);
 276   1      //    tune_time = runtime + ADJUST_TIME_SHORT;
 277   1      //  }else{
 278   1      //    pro_left  = (*current_time_config).lturn_right;
 279   1      //    pro_right = (*current_time_config).rturn_right;
 280   1      //  }
 281   1      }
 282          
 283          void turn_left_max() // 大幅度左修正
 284          {
 285   1        
 286   1        if(runtime>tune_time){
 287   2          if(current_time_config_index!=mode_low){
 288   3            load_time_config(mode_low);
 289   3            tune_time = runtime + ADJUST_TIME_LONG;
 290   3          }
 291   2        }else{
 292   2          pro_left  = (*current_time_config).lturn_left_max;
 293   2          pro_right = (*current_time_config).rturn_left_max;
 294   2        }
 295   1      }
 296          
 297          void turn_right_max() // 大幅度右修正
 298          {
 299   1        if(runtime>tune_time){
 300   2          if(current_time_config_index!=mode_low){
 301   3            load_time_config(mode_low);
C51 COMPILER V9.57.0.0   XUNJI                                                             07/01/2018 12:00:34 PAGE 6   

 302   3            tune_time = runtime + ADJUST_TIME_LONG;
 303   3          }
 304   2        }else{
 305   2          pro_left  = (*current_time_config).lturn_right_max;
 306   2          pro_right = (*current_time_config).rturn_right_max;
 307   2        }
 308   1      }
 309          
 310          //左转90度
 311          void turn_left_90() 
 312          {
 313   1        unsigned int i=(*current_time_config).ltime;         //转过度减少时间，没转够增加时间
 314   1        while(i--)
 315   1        {
 316   2          // 右电机正转，  左电机反转
 317   2          if(i%4) IN2_1 = 1,IN1_2 =1;   //降低转弯速度,便于控制
 318   2          else IN2_1 = 0,IN1_2 =0;
 319   2        }
 320   1        IN2_1 = 0;
 321   1        IN1_2 = 0;
 322   1      }
 323          
 324          // 左转弯实现
 325          // 左电机正转，右电机反转 加快转弯速度
 326          void turn_right_90() //右转90度
 327          {
 328   1        unsigned int i=(*current_time_config).rtime;         //转过度减少时间，没转够增加时间
 329   1        while(i--)
 330   1        {
 331   2          if(i%4) IN1_1 = 1,IN2_2 =1;   //降低转弯速度,便于控制
 332   2          else IN1_1 = 0,IN2_2 =0;
 333   2        }
 334   1        IN1_1 = 0;
 335   1        IN2_2 = 0;
 336   1      }
 337          
 338          void go_straight()
 339          {
 340   1        unsigned int i=5000;
 341   1        while(i--)
 342   1        {
 343   2          if(i%4) IN1_1 = 1,IN2_1 =1;   //降低速度,便于控制
 344   2          else IN1_1 = 0,IN2_1 =0;
 345   2        }
 346   1        IN1_1 = 0;
 347   1        IN2_1 = 0;
 348   1      }
 349          
 350          void stop()
 351          {
 352   1        unsigned int i,j=0;
 353   1        // 防止中断函数导致停止失败
 354   1        for(i=5;i>1;i--) wait();
 355   1        while(1){
 356   2          key_control();
 357   2          set_display(j++);
 358   2          for(i=500;i>1;i--){
 359   3            delay(10);
 360   3            BUZZER = !BUZZER;
 361   3          } 
 362   2        }
 363   1      }
C51 COMPILER V9.57.0.0   XUNJI                                                             07/01/2018 12:00:34 PAGE 7   

 364          
 365          /**
 366           *    十字路口处理程序
 367           *    1、停止当前调整动作
 368           *    2、测距
 369           *    3、判断应该【到终点、左90°转、右90转、直行】
 370           *    4、结束后恢复定时器
 371           */
 372          void crossroad()
 373          {
 374   1        if(XUNJI_1 && XUNJI_2 && XUNJI_3 && XUNJI_4)  //依旧四灯全灭,有理由相信遇到十字路口
 375   1        {
 376   2          wait();
 377   2          if(current_turn_config<sizeof(turn_configs)){
 378   3            if(turn_configs[current_turn_config]==LEFT){
 379   4              turn_left_90();
 380   4              go_straight();
 381   4              TR0 = 1;   //开启T0中断
 382   4              TR1 = 1;   //开启T1中断
 383   4            }else if(turn_configs[current_turn_config]==RIGHT){
 384   4              turn_right_90();
 385   4              go_straight();
 386   4              TR0 = 1;   //开启T0中断
 387   4              TR1 = 1;   //开启T1中断
 388   4            }else if(turn_configs[current_turn_config]==STRAIGHT){
 389   4              // 快速直行走出十字路口区域
 390   4              go_straight();
 391   4              TR0 = 1;   //开启T0中断
 392   4              TR1 = 1;   //开启T1中断
 393   4            }
 394   3          }else{
 395   3            stop();
 396   3            current_turn_config = 0;
 397   3          }
 398   2          current_turn_config++;
 399   2          set_display(current_turn_config);
 400   2        }
 401   1      }
 402          
 403          void wait() //暂停
 404          {
 405   1        TR1 = 0;
 406   1        TR0 = 0;
 407   1        time = 0;
 408   1        tune_time = 0;
 409   1        runtime = 0;
 410   1        pro_left = 0;
 411   1        pro_right = 0;
 412   1        IN1_1 = IN1_2 = IN2_1 = IN2_2 = 0;
 413   1      }
 414          /**
 415           *    循迹1、2、3、4 对应 左、左中、右中、右
 416           *    地面为白色时，灯亮，端口电平->低
 417           *    地面为黑色时，灯灭，端口电平->高
 418           *    左边灯灭，
 419           */
 420          void infrared() //循迹
 421          {
 422   1        //四灯全灭,可能遇到十字路口
 423   1        if(XUNJI_1 && XUNJI_2 && XUNJI_3 && XUNJI_4)
 424   1          crossroad();
 425   1        //严重偏右
C51 COMPILER V9.57.0.0   XUNJI                                                             07/01/2018 12:00:34 PAGE 8   

 426   1        else if(XUNJI_1)
 427   1          turn_left_max();
 428   1        //严重偏左
 429   1        else if(XUNJI_4)
 430   1          turn_right_max();
 431   1        //中间
 432   1        else if(XUNJI_2 && XUNJI_3)
 433   1          straight();
 434   1        //偏右 (注：在严重偏右后面，即不发生严重偏右)
 435   1        else if(XUNJI_2)
 436   1          turn_left();
 437   1        //偏左 (注：在严重偏左后面，即不发生严重偏左)
 438   1        else if(XUNJI_3)
 439   1          turn_right();
 440   1        else
 441   1          straight();
 442   1          
 443   1      }
 444          
 445          // PWM 输出
 446          //电机输出函数
 447          void output()
 448          {
 449   1        if(time > 19)
 450   1        {
 451   2          time = 0;
 452   2          // 直行
 453   2          IN1_1 =1; IN2_1 = 1;
 454   2          IN1_2 =0; IN2_2 = 0;
 455   2          // 计时器 20*100us = 2 ms
 456   2          // 清零防止 tune_time > runtime 导致模式不能切换 
 457   2          if(runtime++==0)tune_time=0;
 458   2        }
 459   1        
 460   1        if(time == pro_left)  IN1_1 = 0;
 461   1        if(time == pro_right) IN2_1 = 0;
 462   1      }
 463          
 464          void set_display(unsigned char digit){
 465   1        display = segdata [digit%10];
 466   1      }
 467          
 468          void set_display_now(){
 469   1        A=BX=C=D=E=F=G=0;
 470   1        A = display&0x01;
 471   1        BX = display&0x02;
 472   1        C = display&0x04;
 473   1        D = display&0x08;
 474   1        E = display&0x10;
 475   1        F = display&0x20;
 476   1        G = display&0x40;
 477   1      }
 478          
 479          // 读取预设参数，快速设置参数
 480          void load_time_config(char idx){
 481   1        current_time_config_index = idx;
 482   1        current_time_config = &speed_level_configs + current_time_config_index;
 483   1        set_display(current_time_config_index+1);
 484   1      }
 485          
 486          // 检测轮子状态
 487          void get_wheel_steps(){
C51 COMPILER V9.57.0.0   XUNJI                                                             07/01/2018 12:00:34 PAGE 9   

 488   1        static unsigned int last_left = 1, last_right = 1;
 489   1        if(CESU_1 != last_left){left_steps++; last_left=CESU_1;} 
 490   1        if(CESU_2 != last_right){set_display(right_steps++); last_right=CESU_2;} 
 491   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1173    ----
   CONSTANT SIZE    =    112    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     28       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
